#!/usr/bin/env python3

import streamlit as st
import pandas as pd
import os
import requests
import re
import time
from datetime import datetime
import google.generativeai as genai
import json
import io
import logging
from io import StringIO

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="üè¢ Grupos Econ√¥micos",
    page_icon="üè¢",
    layout="wide"
)

# Configurar logging
class StreamlitLogHandler(logging.Handler):
    """Handler customizado para exibir logs no Streamlit"""
    def __init__(self):
        super().__init__()
        self.logs = []
    
    def emit(self, record):
        log_entry = self.format(record)
        self.logs.append({
            'time': datetime.now().strftime('%H:%M:%S'),
            'level': record.levelname,
            'message': log_entry
        })

# Configurar logger
logger = logging.getLogger('GrupoEconomicoApp')
logger.setLevel(logging.DEBUG)

# Handler para Streamlit
streamlit_handler = StreamlitLogHandler()
streamlit_handler.setFormatter(logging.Formatter('%(levelname)s - %(message)s'))
logger.addHandler(streamlit_handler)

# Handler para console (opcional)
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
logger.addHandler(console_handler)

class GrupoEconomicoApp:
    def __init__(self):
        self.grupos_conhecidos = {
            "AMBEV": ["ambev", "brahma", "skol", "antarctica", "anheuser"],
            "VALE": ["vale", "samarco"],
            "PETROBRAS": ["petrobras", "br distribuidora"],
            "ITAU": ["itau", "unibanco"],
            "BRADESCO": ["bradesco"],
            "JBS": ["jbs", "friboi", "seara"],
            "NATURA": ["natura", "avon"],
            "MAGAZINE LUIZA": ["magalu", "magazine luiza"],
            "SUZANO": ["suzano"],
            "GERDAU": ["gerdau"]
        }
        logger.info(f"App inicializado com {len(self.grupos_conhecidos)} grupos conhecidos")
    
    def buscar_cnpj(self, cnpj: str):
        """Busca dados do CNPJ em APIs p√∫blicas"""
        cnpj_limpo = re.sub(r'\D', '', cnpj)
        logger.debug(f"Buscando CNPJ: {cnpj_limpo}")
        
        # Cache simples
        if f"cnpj_{cnpj_limpo}" in st.session_state:
            logger.debug(f"CNPJ {cnpj_limpo} encontrado no cache")
            return st.session_state[f"cnpj_{cnpj_limpo}"]
        
        # Tentar APIs
        for api_url in [
            f"https://www.receitaws.com.br/v1/cnpj/{cnpj_limpo}",
            f"https://brasilapi.com.br/api/cnpj/v1/{cnpj_limpo}"
        ]:
            try:
                logger.debug(f"Tentando API: {api_url}")
                response = requests.get(api_url, timeout=10)
                logger.debug(f"Status da resposta: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    
                    # Processar ReceitaWS
                    if "receitaws" in api_url:
                        if data.get('status') == 'OK':
                            result = {
                                'razao_social': data.get('nome', ''),
                                'nome_fantasia': data.get('fantasia', ''),
                                'atividade': data.get('atividade_principal', {}).get('text', '') if isinstance(data.get('atividade_principal'), dict) else str(data.get('atividade_principal', '')),
                                'situacao': data.get('situacao', '')
                            }
                            logger.info(f"‚úÖ Dados encontrados (ReceitaWS): {result['razao_social']}")
                            st.session_state[f"cnpj_{cnpj_limpo}"] = result
                            return result
                        else:
                            logger.warning(f"ReceitaWS retornou status: {data.get('status')}")
                    
                    # Processar Brasil API
                    else:
                        result = {
                            'razao_social': data.get('razao_social', ''),
                            'nome_fantasia': data.get('nome_fantasia', ''),
                            'atividade': data.get('cnae_fiscal_descricao', ''),
                            'situacao': data.get('descricao_situacao_cadastral', '')
                        }
                        logger.info(f"‚úÖ Dados encontrados (BrasilAPI): {result['razao_social']}")
                        st.session_state[f"cnpj_{cnpj_limpo}"] = result
                        return result
            except Exception as e:
                logger.error(f"Erro ao buscar em {api_url}: {str(e)}")
                continue
        
        logger.warning(f"‚ùå Nenhuma API retornou dados para CNPJ {cnpj_limpo}")
        return None
    
    def buscar_perplexity(self, empresa_data: dict, perplexity_key: str):
        """Busca informa√ß√µes sobre grupo econ√¥mico via Perplexity API"""
        try:
            logger.debug("Tentando Perplexity API...")
            
            headers = {
                "Authorization": f"Bearer {perplexity_key}",
                "Content-Type": "application/json"
            }
            
            razao = empresa_data.get('razao_social', '')
            fantasia = empresa_data.get('nome_fantasia', '')
            
            payload = {
                "model": "sonar",
                "messages": [
                    {
                        "role": "system",
                        "content": "Voc√™ √© um assistente especializado em identificar grupos econ√¥micos brasileiros. Responda APENAS com JSON no formato: {\"grupo_economico\": \"NOME_DO_GRUPO\", \"confianca\": 85}"
                    },
                    {
                        "role": "user",
                        "content": f"""Identifique o grupo econ√¥mico desta empresa brasileira:
Raz√£o Social: {razao}
Nome Fantasia: {fantasia}

Grupos conhecidos: {list(self.grupos_conhecidos.keys())}

Se a empresa pertence a algum desses grupos ou voc√™ tem certeza de outro grupo econ√¥mico relevante, informe. Se for independente ou voc√™ n√£o tiver certeza, retorne "INDEPENDENTE".

Responda APENAS com JSON v√°lido."""
                    }
                ],
                "temperature": 0.2,
                "max_tokens": 200
            }
            
            response = requests.post(
                "https://api.perplexity.ai/chat/completions",
                json=payload,
                headers=headers,
                timeout=15
            )
            
            logger.debug(f"Perplexity status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                content = data.get('choices', [{}])[0].get('message', {}).get('content', '')
                logger.debug(f"Resposta Perplexity: {content[:200]}...")
                
                # Tentar extrair JSON
                json_match = re.search(r'\{.*?\}', content, re.DOTALL)
                if json_match:
                    result = json.loads(json_match.group())
                    grupo = result.get('grupo_economico', 'INDEPENDENTE')
                    confianca = result.get('confianca', 75)
                    
                    logger.info(f"‚úÖ Grupo identificado por Perplexity: {grupo} ({confianca}%)")
                    return {
                        'grupo_economico': grupo,
                        'confianca': confianca,
                        'metodo': 'Perplexity'
                    }
                else:
                    logger.warning("Perplexity n√£o retornou JSON v√°lido")
            else:
                logger.error(f"Erro Perplexity: {response.status_code} - {response.text[:200]}")
        except Exception as e:
            logger.error(f"Erro ao usar Perplexity: {str(e)}")
        
        return None
    
    def identificar_grupo(self, empresa_data: dict, gemini_key: str = None, perplexity_key: str = None):
        """Identifica grupo econ√¥mico"""
        razao = empresa_data.get('razao_social', '').lower()
        fantasia = empresa_data.get('nome_fantasia', '').lower()
        
        logger.debug(f"Identificando grupo para: {razao} / {fantasia}")
        
        # An√°lise por regras (sempre funciona)
        for grupo, keywords in self.grupos_conhecidos.items():
            for keyword in keywords:
                if keyword in razao or keyword in fantasia:
                    logger.info(f"‚úÖ Grupo identificado por regras: {grupo} (keyword: {keyword})")
                    return {
                        'grupo_economico': grupo,
                        'confianca': 85,
                        'metodo': 'Regras'
                    }
        
        logger.debug("Nenhum grupo identificado por regras, tentando AI...")
        
        # PRIORIDADE 1: Perplexity (mais confi√°vel para pesquisa)
        if perplexity_key:
            resultado = self.buscar_perplexity(empresa_data, perplexity_key)
            if resultado:
                return resultado
        else:
            logger.warning("Chave do Perplexity n√£o fornecida")
        
        # PRIORIDADE 2: Gemini (fallback)
        if gemini_key:
            try:
                logger.debug("Tentando Gemini API...")
                genai.configure(api_key=gemini_key)
                
                for modelo in ['gemini-2.5-flash', 'gemini-2.5-pro']:
                    try:
                        logger.debug(f"Tentando modelo: {modelo}")
                        model = genai.GenerativeModel(modelo)
                        prompt = f"""
Identifique o grupo econ√¥mico da empresa brasileira:
Raz√£o Social: {empresa_data.get('razao_social', '')}
Nome Fantasia: {empresa_data.get('nome_fantasia', '')}

Grupos conhecidos: {list(self.grupos_conhecidos.keys())}

Busque por similaridade, mesmo que o nome n√£o seja exatamente igual. Busque rela√ß√µes √≥bvias ou hist√≥ricas, como "Ambev" para "Brahma" ou "Skol". Use o CNPJ para contexto se necess√°rio, mas n√£o dependa dele. qualquer empresa que n√£o se encaixe em grupos conhecidos deve ser classificada como "INDEPENDENTE", mas apenas em √∫ltimo caso.

Responda APENAS com JSON v√°lido:
{{"grupo_economico": "NOME_GRUPO ou INDEPENDENTE", "confianca": 80}}
                        """
                        
                        logger.debug("Enviando prompt para Gemini...")
                        response = model.generate_content(prompt)
                        logger.debug(f"Resposta do Gemini: {response.text[:200]}...")
                        
                        json_match = re.search(r'\{.*?\}', response.text, re.DOTALL)
                        
                        if json_match:
                            result = json.loads(json_match.group())
                            logger.info(f"‚úÖ Grupo identificado por Gemini ({modelo}): {result.get('grupo_economico')} ({result.get('confianca')}%)")
                            return {
                                'grupo_economico': result.get('grupo_economico', 'INDEPENDENTE'),
                                'confianca': result.get('confianca', 70),
                                'metodo': f'Gemini ({modelo})'
                            }
                        else:
                            logger.warning(f"Gemini n√£o retornou JSON v√°lido")
                        break
                    except Exception as e:
                        logger.error(f"Erro com modelo {modelo}: {str(e)}")
                        continue
            except Exception as e:
                logger.error(f"Erro ao usar Gemini: {str(e)}")
        else:
            logger.warning("Chave do Gemini n√£o fornecida")
        
        # Fallback final
        logger.warning("‚ö†Ô∏è Caindo no fallback - classificando como INDEPENDENTE")
        return {
            'grupo_economico': 'INDEPENDENTE',
            'confianca': 50,
            'metodo': 'Padr√£o'
        }
    
    def processar_planilha(self, df: pd.DataFrame, cnpj_col: str, gemini_key: str = None, perplexity_key: str = None):
        """Processa planilha com CNPJs"""
        logger.info(f"Iniciando processamento de {len(df)} CNPJs")
        resultados = []
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        for idx, row in df.iterrows():
            progress = (idx + 1) / len(df)
            progress_bar.progress(progress)
            status_text.text(f"Processando {idx+1}/{len(df)}: {row[cnpj_col]}")
            
            cnpj = str(row[cnpj_col]).strip()
            logger.info(f"\n{'='*60}\nProcessando linha {idx+1}: {cnpj}")
            
            # Inicializar resultado base
            resultado = {
                'cnpj_original': cnpj,
                'erro': None
            }
            
            # Validar CNPJ
            cnpj_limpo = re.sub(r'\D', '', cnpj)
            if len(cnpj_limpo) != 14:
                logger.error(f"CNPJ inv√°lido: {cnpj} (tamanho: {len(cnpj_limpo)})")
                resultado['erro'] = 'CNPJ inv√°lido'
            else:
                # Buscar dados
                empresa_data = self.buscar_cnpj(cnpj)
                
                if empresa_data:
                    # Identificar grupo
                    grupo_info = self.identificar_grupo(empresa_data, gemini_key, perplexity_key)
                    
                    resultado.update({
                        'cnpj': cnpj_limpo,
                        'razao_social': empresa_data['razao_social'],
                        'nome_fantasia': empresa_data['nome_fantasia'],
                        'grupo_economico': grupo_info['grupo_economico'],
                        'confianca': grupo_info['confianca'],
                        'metodo_analise': grupo_info['metodo'],
                        'atividade': empresa_data['atividade'],
                        'situacao': empresa_data['situacao']
                    })
                    logger.info(f"‚úÖ Resultado: {grupo_info['grupo_economico']} ({grupo_info['confianca']}%) via {grupo_info['metodo']}")
                else:
                    resultado.update({
                        'cnpj': cnpj_limpo,
                        'erro': 'Dados n√£o encontrados'
                    })
                    logger.error(f"‚ùå Dados n√£o encontrados para CNPJ {cnpj}")
            
            # Adicionar dados originais da planilha
            for col in df.columns:
                if col != cnpj_col:
                    resultado[f'original_{col}'] = row[col]
            
            resultados.append(resultado)
            
            # Pausa para n√£o sobrecarregar APIs
            if idx < len(df) - 1:
                time.sleep(1)
        
        progress_bar.empty()
        status_text.empty()
        logger.info(f"Processamento conclu√≠do: {len(resultados)} registros")
        
        return pd.DataFrame(resultados)

def main():
    st.title("üè¢ Identificador de Grupos Econ√¥micos")
    st.markdown("**Upload uma planilha com CNPJs e baixe com os grupos econ√¥micos identificados**")
    
    app = GrupoEconomicoApp()
    
    # Sidebar
    with st.sidebar:
        gemini_key = st.secrets.get("GEMINI_API_KEY")
        perplexity_key = st.secrets.get("PERPLEXITY_API_KEY")
        
        # Indicador de APIs configuradas
        st.markdown("**üîë APIs Configuradas:**")
        st.markdown(f"{'‚úÖ' if perplexity_key else '‚ùå'} Perplexity (Prioridade 1)")
        st.markdown(f"{'‚úÖ' if gemini_key else '‚ùå'} Gemini (Fallback)")
        
        st.markdown("---")
        st.markdown("**üêõ Debug**")
        show_logs = st.checkbox("Mostrar logs detalhados", value=False)
        
        if st.button("üóëÔ∏è Limpar cache"):
            for key in list(st.session_state.keys()):
                if key.startswith('cnpj_'):
                    del st.session_state[key]
            st.success("Cache limpo!")
            logger.info("Cache limpo manualmente")
        
        st.markdown("---")
        st.markdown("**üìã Como usar:**")
        st.markdown("1. Fa√ßa upload da planilha Excel")
        st.markdown("2. Selecione a coluna com CNPJs")
        st.markdown("3. Processe e baixe resultado")
    
    # √Årea principal
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.header("üìÅ Upload da Planilha")
        
        # Upload do arquivo
        uploaded_file = st.file_uploader(
            "Escolha um arquivo Excel (.xlsx, .xls)",
            type=['xlsx', 'xls'],
            help="Sua planilha deve ter pelo menos uma coluna com CNPJs"
        )
        
        if uploaded_file:
            try:
                # Ler planilha
                df = pd.read_excel(uploaded_file)
                st.success(f"‚úÖ Planilha carregada: {len(df)} linhas, {len(df.columns)} colunas")
                logger.info(f"Planilha carregada: {len(df)} linhas")
                
                # Mostrar preview
                with st.expander("üëÅÔ∏è Preview da planilha"):
                    st.dataframe(df.head())
                
                # Selecionar coluna do CNPJ
                cnpj_column = st.selectbox(
                    "üìã Selecione a coluna que cont√©m os CNPJs:",
                    options=df.columns.tolist(),
                    help="Escolha a coluna com os n√∫meros de CNPJ"
                )
                
                # Bot√£o processar
                if st.button("üöÄ Processar Planilha", type="primary", use_container_width=True):
                    
                    with st.spinner("Processando CNPJs..."):
                        df_resultado = app.processar_planilha(df, cnpj_column, gemini_key, perplexity_key)
                    
                    st.success(f"‚úÖ Processamento conclu√≠do!")
                    
                    # Mostrar estat√≠sticas
                    total_registros = len(df_resultado)
                    registros_com_erro = df_resultado['erro'].notna().sum()
                    sucessos = total_registros - registros_com_erro
                    erros = registros_com_erro
                    
                    col_stat1, col_stat2, col_stat3 = st.columns(3)
                    with col_stat1:
                        st.metric("Total", len(df_resultado))
                    with col_stat2:
                        st.metric("Sucessos", sucessos)
                    with col_stat3:
                        st.metric("Erros", erros)
                    
                    # Mostrar resultado
                    st.header("üìä Resultado")
                    
                    # Colunas principais para visualiza√ß√£o
                    colunas_principais = ['cnpj_original', 'razao_social', 'grupo_economico', 'confianca']
                    colunas_disponiveis = [col for col in colunas_principais if col in df_resultado.columns]
                    
                    if colunas_disponiveis:
                        st.dataframe(df_resultado[colunas_disponiveis], use_container_width=True)
                    
                    # Gr√°fico de grupos (se houver sucessos)
                    if sucessos > 0:
                        registros_validos = df_resultado[df_resultado['erro'].isna()]
                        
                        if len(registros_validos) > 0 and 'grupo_economico' in registros_validos.columns:
                            grupos_count = registros_validos['grupo_economico'].value_counts()
                            if len(grupos_count) > 0:
                                st.subheader("üìä Distribui√ß√£o por Grupos")
                                st.bar_chart(grupos_count)
                    
                    # Download
                    st.header("üíæ Download")
                    
                    # Preparar Excel
                    buffer = io.BytesIO()
                    with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                        df_resultado.to_excel(writer, index=False, sheet_name='Resultado')
                    
                    st.download_button(
                        label="üì• Baixar Excel com Resultados",
                        data=buffer.getvalue(),
                        file_name=f"grupos_economicos_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        type="primary",
                        use_container_width=True
                    )
                    
                    # Detalhes completos
                    with st.expander("üîç Ver dados completos"):
                        st.dataframe(df_resultado, use_container_width=True)
                
            except Exception as e:
                logger.exception("Erro cr√≠tico no processamento")
                st.error(f"‚ùå Erro ao processar planilha: {e}")
    
    with col2:
        st.header("‚ÑπÔ∏è Informa√ß√µes")
        
        # Template de exemplo
        st.markdown("**üìã Exemplo de planilha:**")
        
        exemplo_data = {
            'cnpj': ['33.000.167/0001-01', '02.916.265/0001-60'],
            'nome_empresa': ['Vale S.A.', 'Ambev S.A.']
        }
        exemplo_df = pd.DataFrame(exemplo_data)
        st.dataframe(exemplo_df, hide_index=True)
        
        # Download template
        buffer_template = io.BytesIO()
        exemplo_df.to_excel(buffer_template, index=False)
        
        st.download_button(
            "üìÑ Baixar Template",
            data=buffer_template.getvalue(),
            file_name="template_cnpjs.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
        
        st.markdown("---")
        st.markdown("**üéØ Grupos identificados:**")
        for grupo in list(app.grupos_conhecidos.keys())[:8]:
            st.markdown(f"‚Ä¢ {grupo}")
        st.markdown("‚Ä¢ E outros...")
    
    # Exibir logs se habilitado
    if show_logs:
        st.markdown("---")
        st.header("üêõ Logs de Debug")
        
        if streamlit_handler.logs:
            # Criar DataFrame com os logs
            logs_df = pd.DataFrame(streamlit_handler.logs)
            
            # Filtros
            col_filter1, col_filter2 = st.columns(2)
            with col_filter1:
                level_filter = st.multiselect(
                    "Filtrar por n√≠vel:",
                    options=['DEBUG', 'INFO', 'WARNING', 'ERROR'],
                    default=['INFO', 'WARNING', 'ERROR']
                )
            
            with col_filter2:
                search_term = st.text_input("Buscar nos logs:", "")
            
            # Aplicar filtros
            filtered_logs = logs_df[logs_df['level'].isin(level_filter)]
            if search_term:
                filtered_logs = filtered_logs[filtered_logs['message'].str.contains(search_term, case=False, na=False)]
            
            # Exibir logs
            st.dataframe(
                filtered_logs,
                use_container_width=True,
                height=400
            )
            
            # Bot√£o para limpar logs
            if st.button("üóëÔ∏è Limpar logs"):
                streamlit_handler.logs.clear()
                st.rerun()
        else:
            st.info("Nenhum log ainda. Processe uma planilha para ver os logs.")

if __name__ == "__main__":
    main()
